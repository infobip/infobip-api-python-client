# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from infobip_api_client.models.message_error import MessageError
from infobip_api_client.models.message_price import MessagePrice
from infobip_api_client.models.message_status import MessageStatus
from typing import Optional, Set
from typing_extensions import Self


class EmailWebhookDeliveryReport(BaseModel):
    """
    EmailWebhookDeliveryReport
    """  # noqa: E501

    bulk_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that uniquely identifies a list of email messages. This is either defined by user in the request or auto generated.",
        alias="bulkId",
    )
    price: Optional[MessagePrice] = None
    status: Optional[MessageStatus] = None
    error: Optional[MessageError] = None
    message_id: Optional[StrictStr] = Field(
        default=None,
        description="The ID that uniquely identifies the email sent to the recipient.",
        alias="messageId",
    )
    done_at: Optional[datetime] = Field(
        default=None, description="Delivery date and time.", alias="doneAt"
    )
    sms_count: Optional[StrictInt] = Field(
        default=None, description="The number of emails sent.", alias="smsCount"
    )
    sent_at: Optional[datetime] = Field(
        default=None,
        description="Send date and time. Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.",
        alias="sentAt",
    )
    browser_link: Optional[StrictStr] = Field(
        default=None,
        description="Contains the link to the HTML sent to recipient. This will be present only if the _view in browser_ feature is used in the email. (Please note that this feature is not activated automatically for Email traffic sent over API. If you would like to utilize it please reach out to your Infobip person of contact.)",
        alias="browserLink",
    )
    sending_ip: Optional[StrictStr] = Field(
        default=None,
        description="The IP address that was used to send out the email.",
        alias="sendingIp",
    )
    attempt_count: Optional[StrictInt] = Field(
        default=None,
        description="Number of times delivery was attempted for the email.",
        alias="attemptCount",
    )
    time_to_first_attempt: Optional[StrictInt] = Field(
        default=None,
        description="This is the time in milliseconds between accepting the request and making the first delivery attempt to the destination.",
        alias="timeToFirstAttempt",
    )
    callback_data: Optional[StrictStr] = Field(
        default=None,
        description="Callback data sent through `callbackData` field in fully featured email.",
        alias="callbackData",
    )
    to: Optional[StrictStr] = Field(
        default=None, description="Destination email address."
    )
    campaign_reference_id: Optional[StrictStr] = Field(
        default=None,
        description="ID of a campaign that was sent in the message.",
        alias="campaignReferenceId",
    )
    entity_id: Optional[StrictStr] = Field(
        default=None,
        description="Used when specifying an entity in outbound send requests. It is also returned in notification events. For detailed usage, refer to the [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).",
        alias="entityId",
    )
    application_id: Optional[StrictStr] = Field(
        default=None,
        description="Used when specifying an application in outbound send requests. It is also returned in notification events. For detailed usage, refer to the [documentation](https://www.infobip.com/docs/cpaas-x/application-and-entity-management).",
        alias="applicationId",
    )
    __properties: ClassVar[List[str]] = [
        "bulkId",
        "price",
        "status",
        "error",
        "messageId",
        "doneAt",
        "smsCount",
        "sentAt",
        "browserLink",
        "sendingIp",
        "attemptCount",
        "timeToFirstAttempt",
        "callbackData",
        "to",
        "campaignReferenceId",
        "entityId",
        "applicationId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailWebhookDeliveryReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict["price"] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict["error"] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailWebhookDeliveryReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bulkId": obj.get("bulkId"),
                "price": MessagePrice.from_dict(obj["price"])
                if obj.get("price") is not None
                else None,
                "status": MessageStatus.from_dict(obj["status"])
                if obj.get("status") is not None
                else None,
                "error": MessageError.from_dict(obj["error"])
                if obj.get("error") is not None
                else None,
                "messageId": obj.get("messageId"),
                "doneAt": obj.get("doneAt"),
                "smsCount": obj.get("smsCount"),
                "sentAt": obj.get("sentAt"),
                "browserLink": obj.get("browserLink"),
                "sendingIp": obj.get("sendingIp"),
                "attemptCount": obj.get("attemptCount"),
                "timeToFirstAttempt": obj.get("timeToFirstAttempt"),
                "callbackData": obj.get("callbackData"),
                "to": obj.get("to"),
                "campaignReferenceId": obj.get("campaignReferenceId"),
                "entityId": obj.get("entityId"),
                "applicationId": obj.get("applicationId"),
            }
        )
        return _obj
