# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class CallsSynthesisVoice(BaseModel):
    """
    Array of voices belonging to the specified language.
    """  # noqa: E501

    name: Optional[StrictStr] = Field(
        default=None, description="Name of the voice. Example: `Joanna`"
    )
    gender: Optional[StrictStr] = Field(
        default=None, description="Gender of the voice. Can be `male` or `female`."
    )
    supplier: Optional[StrictStr] = Field(
        default=None, description="Name of the supplier for text to speech synthesis."
    )
    ssml_supported: Optional[StrictBool] = Field(
        default=None,
        description="Indicates if SSML is supported.",
        alias="ssmlSupported",
    )
    is_default: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether voice is default voice for a given language. If voice is not chosen for the language, then default voice will be used.",
        alias="isDefault",
    )
    is_neural: Optional[StrictBool] = Field(
        default=None,
        description="Indicates whether voice is neural. Using neural voice will generate additional cost.",
        alias="isNeural",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "gender",
        "supplier",
        "ssmlSupported",
        "isDefault",
        "isNeural",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallsSynthesisVoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallsSynthesisVoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "gender": obj.get("gender"),
                "supplier": obj.get("supplier"),
                "ssmlSupported": obj.get("ssmlSupported"),
                "isDefault": obj.get("isDefault"),
                "isNeural": obj.get("isNeural"),
            }
        )
        return _obj
