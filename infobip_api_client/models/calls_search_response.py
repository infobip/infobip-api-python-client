# coding: utf-8

"""
    Infobip Client API Libraries OpenAPI Specification

    OpenAPI specification containing public endpoints supported in client API libraries.

    The version of the OpenAPI document: 1.0.0
    Contact: support@infobip.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class CallsSearchResponse(BaseModel):
    """
    CallsSearchResponse
    """  # noqa: E501

    create_time: Optional[datetime] = Field(
        default=None, description="Creation timestamp.", alias="createTime"
    )
    description: Optional[StrictStr] = Field(
        default=None, description="Scenario description."
    )
    id: Optional[StrictStr] = Field(
        default=None, description="Scenario key. It is used for launching IVR scenario."
    )
    name: Optional[StrictStr] = Field(default=None, description="Scenario name.")
    script: Optional[StrictStr] = None
    update_time: Optional[datetime] = Field(
        default=None, description="Update timestamp", alias="updateTime"
    )
    last_usage_date: Optional[date] = Field(
        default=None,
        description="Last usage date. `null` for scenarios that are used last time before `2024-01-01`.",
        alias="lastUsageDate",
    )
    __properties: ClassVar[List[str]] = [
        "createTime",
        "description",
        "id",
        "name",
        "script",
        "updateTime",
        "lastUsageDate",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CallsSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        if "script" in _dict:
            try:
                _dict["script"] = json.loads(self.script)
            except json.JSONDecodeError:
                pass

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CallsSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        script_value = obj.get("script")
        if isinstance(script_value, (list, dict)):
            script_value = json.dumps(script_value)

        _obj = cls.model_validate(
            {
                "createTime": obj.get("createTime"),
                "description": obj.get("description"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "script": script_value,
                "updateTime": obj.get("updateTime"),
                "lastUsageDate": obj.get("lastUsageDate"),
            }
        )
        return _obj
